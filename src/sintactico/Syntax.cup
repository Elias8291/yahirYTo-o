package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import lexico.Main;
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;
import semantico.Traductor.*;
// http://www2.cs.tum.edu/projects/cup/docs.php
// https://www.youtube.com/watch?v=AQkd5AwjV1E
// http://themfgeek.blogspot.com/2012/10/sintaxis-cup.html
// https://www.youtube.com/watch?v=bBuWPmDrF5M
// https://youtu.be/tSaPDOT2I_4?t=1120
// https://github.com/jflex-de/jflex/blob/master/jflex/examples/cup-java/src/main/cup/java12.cup
// http://staff.polito.it/silvano.rivoira/HowToWriteYourOwnCompiler.htm
// https://www.cs.auckland.ac.nz/courses/compsci330s1c/lectures/330ChaptersPDF/Chapt6.pdf

import semantico.*;


action code
{:
    public PilaSemantica pilaSemantica = new PilaSemantica();
    public DTO miDTO = new DTO();
    public List<String> miLista = new ArrayList<>();
    public String miToken = "";
:}

parser code
{:
    @Override
    protected int error_sync_size(){
        return 1;
    }

    private Symbol tokenError;

    private TablaSimbolos tablaSimbolos = new TablaSimbolos();

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;
            tokenError = s;

            //System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;

            String mensaje = "Error sintáctico irrecuperable, con el símbolo: " + lexema;
            ErrorUI(mensaje, lexema, fila, columna);

            //System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    public void report_error(String message, Object info)
    {
        if (info instanceof String){
            System.out.println(message);
        }
        else {
            if (info instanceof Symbol){
                String m = "Error sintático en: " + message;
                Symbol s = (Symbol)info;
                m += ", con el símbolo: \"" + s.value.toString() + "\"";
                ErrorUI(m, s.value.toString(), (s.left+1), s.right);
            }else{
                System.err.println(message);
            }
        }
    }

    public void ErrorUI(String pMsg, String token, int linea, int columna)
    {
        String msg = pMsg + ". En la línea: " + (linea) + ", columna: " + (columna) + ".";

        Main.miInstancia.agregarErrorSintactico(msg);
    }

    public void ErrorSemantico(Simbolo simbolo)
    {
        String msg = "Error en la línea "+ simbolo.getFila() + ", columna "+ simbolo.getColumna() +". Ya existe ";
        if(simbolo instanceof Variable){
            msg += "la variable '" + simbolo.getIdentificador() + "' en el ámbito " + simbolo.getAmbito();
        }
        else if(simbolo instanceof Funcion){
            msg += "la funcion '" + simbolo.getIdentificador() + "' con los mismos parámetros";
        }

        Main.miInstancia.agregarErrorSemantico(msg);
    }

    public void ErrorSemantico(String tipo, String identificador, int fila, int columna){
        String msg = "Error en la línea "+ (fila+1) + ", columna "+ columna + ". ";
        switch (tipo){
            case "parametro":
                msg += "El parámetro '" + identificador + "' ya está definido en la función";
                break;
            case "variable":
                msg += "La variable '" + identificador + "' no ha sido declarada";
                break;
            case "funcion":
                msg += "La función '" + identificador + "' no existe con esos parámetros";
                break;
            case "retorno":
                msg += "El identificador '" + identificador + "' en el retorno no corresponde al nombre de la función";
                break;
        }

        Main.miInstancia.agregarErrorSemantico(msg);
    }

    public void mostrarTablaSimbolos(){
        Main.miInstancia.mostrarTablaSimbolos(tablaSimbolos.verTablaSimbolos());
    }

    //el retorno solo es util para las funciones
    public boolean verificarVariablesUsadas(String ambito, boolean esFuncion){
        int tamanoVariablesUsadas = tablaSimbolos.variablesUsadas.size();
        for(int i=0; i<tamanoVariablesUsadas; i++){
            Variable var = tablaSimbolos.variablesUsadas.get(i);

            if(esFuncion && (i == tamanoVariablesUsadas-1)){
                if(!var.getIdentificador().equals(ambito)){
                    ErrorSemantico("retorno", var.getIdentificador(), var.getFila(), var.getColumna());
                    return false;
                }
            }
            else if(!tablaSimbolos.existeVariable(var.getIdentificador(), ambito)){
                ErrorSemantico("variable", var.getIdentificador(), var.getFila(), var.getColumna());
            }
        }
        //Se limpia la lista para ser usada luego
        tablaSimbolos.variablesUsadas = new ArrayList<>();
        return true;
    }


    public void agregarFuncion(String identificador, int fila, int columna){
        //null si todos los parámetros están bien
        ArrayList<Variable> errores = tablaSimbolos.getParametrosErroneos();
        if(errores != null){
            for(Variable v : errores)
                ErrorSemantico("parametro", v.getIdentificador(), v.getFila(), v.getColumna());
            //para que no quede un tipo ahí botado
            tablaSimbolos.desecharUltimoTipoDato();
        }
        else{
            Funcion funcion = tablaSimbolos.crearFuncion(identificador, fila, columna);

            //revisa las llamadas a variables
            boolean retornoCorrecto;
            if(funcion.getTipoRetorno() != null){  //es funcion
                retornoCorrecto = verificarVariablesUsadas(identificador, true);
            }else{                          //es procedimiento
                retornoCorrecto = verificarVariablesUsadas(identificador, false);
            }


            if(retornoCorrecto){
                //Revisa las variables locales
                for(int i=0; i<tablaSimbolos.variables.size(); i++){
                    Variable var = tablaSimbolos.variables.get(i);
                    var.setAmbito(identificador);
                    if(!tablaSimbolos.existeSimbolo(var)){
                        tablaSimbolos.insertar(var);
                    }else{
                        ErrorSemantico(var);
                    }
                }

                if(!tablaSimbolos.existeSimbolo(funcion)){
                    tablaSimbolos.insertar(funcion);
                }else{
                    ErrorSemantico(funcion);
                }
            }
        }

        //limpia la lista para ser usada luego
        tablaSimbolos.variables = new ArrayList<>();
        //limpia la lista de parámetros para que pueda ser usada luego
        tablaSimbolos.parametros = new ArrayList<>();
        //este simpre se traslapa entre producciones >:v
        tablaSimbolos.limpiarParametrosLlamada();
    }
:}

// |-------------------- TERMINALES --------------------| //

// Operadores
terminal OPERADOR,
        OPERADOR_INCREMENTO,
        OPERADOR_DISMINUCION,
        OPERADOR_MAYOR_IGUAL_QUE,
        OPERADOR_MAYOR_QUE,
        OPERADOR_MENOR_IGUAL_QUE,
        OPERADOR_MENOR_QUE,
        OPERADOR_ADICION,
        OPERADOR_SUSTRACCION,
        OPERADOR_MULTIPLICACION,
        OPERADOR_DIVISION,
        OPERADOR_PARENTESIS_ABRIR,
        OPERADOR_PARENTESIS_CERRAR,
        OPERADOR_CORCHETE_ABRIR,
        OPERADOR_CORCHETE_CERRAR,
        OPERADOR_ASIGNACION_1, // :=
        OPERADOR_ASIGNACION_2, // =
        OPERADOR_DIFERENTE_DE,
        OPERADOR_ASIGNACION_ADICION,
        OPERADOR_ASIGNACION_SUSTRACCION,
        OPERADOR_ASIGNACION_MULTIPLICACION,
        OPERADOR_ASIGNACION_DIVISION,
        OPERADOR_DESPLAZAMIENTO_DERECHA,
        OPERADOR_DESPLAZAMIENTO_IZQUIERDA,
        OPERADOR_ASIGNACION_DESPLAZAMIENTO_DERECHA,
        OPERADOR_ASIGNACION_DESPLAZAMIENTO_IZQUIERDA,

        OPERADOR_COMA,
        OPERADOR_PUNTO_Y_COMA,
        OPERADOR_DOS_PUNTOS,

        OR, AND, NOT,

        MOD, DIV;

terminal IDENTIFICADOR,
        LITERAL_NUM_FLOTANTE,
        LITERAL_STRING,
        LITERAL_NUM_ENTERO,
        PALABRA_RESERVADA;

terminal PROGRAM, BEGIN, END, CONST, VAR, FUNCTION, PROCEDURE, READ, WRITE;

terminal IF, THEN, ELSE, WHILE, REPEAT, UNTIL, FOR, TO, DO;

terminal TRUE, FALSE;

terminal INT, LONGINT, SHORTINT, CHAR, STRING, BOOLEAN, REAL;

terminal ERROR_IDENTIFICADOR,
        ERROR_LITERAL,
        ERROR_PALABRA_RESERVADA,
        ERROR_OPERADOR;

// |-------------------- NO TERMINALES --------------------| //

non terminal Symbol inicio, programa, encabezado, cuerpo, _cuerpo, variables, _variables, __variables, ___variables,
            constantes, _constantes, __constantes, tipos, declarar_datos, declarar_func_proc, instrucciones,
            declarar_funciones, declarar_procedimientos, asignar_valores_1, asignar_valores_2, parametros_entrada,
            _parametros_entrada, __parametros_entrada, retorno_funcion, expr_aritmeticas, _expr_aritmeticas,
            operadores_aritmeticos, _operadores_aritmeticos, __operadores_aritmeticos, ___operadores_aritmeticos,
            estruc_de_control, parametros_llamada_func, _parametros_llamada_func, llamar_func_o_proc, expr_read_write,
            expr_read, _expr_read, expr_write, _expr_write,

            sentencia_if, _sentencia_if, expr_booleanas, sentencia_else, tokens, _tokens,
            _expr_booleanas, sentencia_while, sentencia_for, operadores_booleanos, operadores_booleanos_1,
            tokens_boolean;

non terminal Symbol epsilon;


//Esta es para ponerle el ámbito a cada variable dentro de la función/procedimiento
non terminal Symbol declarar_datos_locales;

precedence left OPERADOR_ADICION, OPERADOR_SUSTRACCION;
precedence left OPERADOR_MULTIPLICACION, OPERADOR_DIVISION;

start with inicio;

// ------------------------------ Start --------------------------------------------------------------------------------

inicio ::= programa;

programa ::= PROGRAM IDENTIFICADOR encabezado
            BEGIN
            _cuerpo
            END
            {:
                verificarVariablesUsadas("Global", false);

                //que este quede de último xD no sé donde más meterlo
                mostrarTablaSimbolos();
            :}
            | PROGRAM IDENTIFICADOR encabezado
                BEGIN
                _cuerpo
                {:
                    Symbol tokenAct = (Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1);
                    report_error("PROGRAM sin cierre END", tokenAct);
                    RESULT = new Symbol(-1);
                :}
            | PROGRAM error
                {:
                    report_error("PROGRAM", tokenError);
                    RESULT = new Symbol(-1);
                :};

// ------------------------------ Encabezado ---------------------------------------------------------------------------
encabezado ::= declarar_datos declarar_func_proc
            | error
                {:
                    report_error("Declaraciones globales", tokenError);
                    RESULT = new Symbol(-1);
                :};

//Estos son datos globales xD
declarar_datos ::= constantes variables
                {:
                    for(int i=0; i<tablaSimbolos.variables.size(); i++){
                        Variable var = tablaSimbolos.variables.get(i);
                        var.setAmbito("Global");
                        if(!tablaSimbolos.existeSimbolo(var)){
                            tablaSimbolos.insertar(var);
                        }else{
                            ErrorSemantico(var);
                        }
                    }
                    //limpia la lista de variables para ser usada luego
                    tablaSimbolos.variables = new ArrayList<>();
                :};

//Esta es para ponerle el ámbito a cada variable dentro de la función/procedimiento
declarar_datos_locales ::= constantes variables;

constantes ::= CONST _constantes | epsilon
            | CONST error
                {:
                    report_error("Declaración de constante", tokenError);
                    RESULT = new Symbol(-1);
                :}
                OPERADOR_PUNTO_Y_COMA __constantes;
_constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION_2 tokens OPERADOR_PUNTO_Y_COMA __constantes;
__constantes ::= _constantes | epsilon;

variables ::= VAR _variables | epsilon
            | VAR error
                {:
                    report_error("Declaración de variable", tokenError);
                    RESULT = new Symbol(-1);
                :}
                OPERADOR_PUNTO_Y_COMA ___variables;
_variables ::= IDENTIFICADOR:id __variables OPERADOR_DOS_PUNTOS tipos:tipo OPERADOR_PUNTO_Y_COMA ___variables
                {:
                    tablaSimbolos.agregarVariable(id.toString(), idleft, idright);
                :};
__variables ::= OPERADOR_COMA IDENTIFICADOR:id __variables
                {:
                    tablaSimbolos.agregarVariableSinTipo(id.toString(), idleft, idright);
                :}
                | epsilon;
___variables ::= _variables | epsilon;

declarar_func_proc ::= declarar_funciones declarar_func_proc
                     | declarar_procedimientos declarar_func_proc
                     | epsilon
                     | FUNCTION error
                         {:
                             report_error("Declaración de función", tokenError);
                             RESULT = new Symbol(-1);
                         :}
                         END declarar_func_proc
                     | PROCEDURE error
                          {:
                              report_error("Declaración de procedimiento", tokenError);
                              RESULT = new Symbol(-1);
                          :}
                          END declarar_func_proc;

// ¡¡¡¡¡¡¡¡¡¡¡¡¡¡FALTA EL ERROR DE SI VIENE CON EL CUERPO Y NO TIENE EL RETORNO DE FUNCION!!!!!!!!!!!!!!!!!!!!!!!

declarar_funciones ::= FUNCTION IDENTIFICADOR:id OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos
                    declarar_datos_locales
                    BEGIN cuerpo asignar_valores_1 END
                    {:
                        //Esta es local, está definida dentro de Syntax.cup
                        // Es para poder ser reusada y mostrar los errores
                        agregarFuncion(id.toString(), idleft, idright);
                    :}
                    |
                    //este llama a retorno de funcion para que maneje el error
                    FUNCTION IDENTIFICADOR:id OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos
                    declarar_datos_locales
                    BEGIN /* sin cuerpo */ retorno_funcion END
                    {:
                        //Esta es local, está definida dentro de Syntax.cup
                        // Es para poder ser reusada y mostrar los errores
                        agregarFuncion(id.toString(), idleft, idright);
                    :};

declarar_procedimientos ::= PROCEDURE IDENTIFICADOR:id OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR
                    declarar_datos_locales
                    BEGIN cuerpo END
                    {:
                        //Esta es local, está definida dentro de Syntax.cup
                        // Es para poder ser reusada y mostrar los errores
                        agregarFuncion(id.toString(), idleft, idright);
                    :}
                    |
                    PROCEDURE IDENTIFICADOR:id OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR
                    declarar_datos_locales
                    BEGIN /* sin cuerpo */ END
                    {:
                        //Esta es local, está definida dentro de Syntax.cup
                        // Es para poder ser reusada y mostrar los errores
                        agregarFuncion(id.toString(), idleft, idright);
                    :};

retorno_funcion ::= IDENTIFICADOR:id OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA
                    {:
                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    :}
                    | /* epsilon */
                    {:  //es aceptado pero se reporta como error
                        Symbol tokenAct = (Symbol)CUP$Syntax$stack.peek();
                        report_error("Retorno de función", tokenAct);
                        RESULT = new Symbol(-1);
                    :};

parametros_entrada ::= _parametros_entrada | epsilon;
_parametros_entrada ::= tipos IDENTIFICADOR:id __parametros_entrada
                    {:
                        tablaSimbolos.agregarParametro(id.toString(), idleft, idright);
                    :};
__parametros_entrada ::= OPERADOR_COMA _parametros_entrada | epsilon;

// ------------------------------ Cuerpo -------------------------------------------------------------------------------

cuerpo ::= cuerpo instrucciones
         | cuerpo estruc_de_control
         | instrucciones
         | estruc_de_control
         | error
            {:
                report_error("Cuerpo", tokenError);
                RESULT = new Symbol(-1);
            :};

_cuerpo ::= cuerpo | epsilon;

instrucciones ::= asignar_valores_1         //Los parametros de llamada siempre se traslapan entre estas cosas >:v
                    {: tablaSimbolos.limpiarParametrosLlamada(); :}
                | asignar_valores_2 OPERADOR_PUNTO_Y_COMA
                    {: tablaSimbolos.limpiarParametrosLlamada(); :}
                | expr_read_write
                    {: tablaSimbolos.limpiarParametrosLlamada(); :}
                | llamar_func_o_proc OPERADOR_PUNTO_Y_COMA
                    {: tablaSimbolos.limpiarParametrosLlamada(); :}
                | error
                     {:
                         report_error("Expresión", tokenError);
                         RESULT = new Symbol(-1);
                     :}
                     OPERADOR_PUNTO_Y_COMA;

asignar_valores_1 ::= IDENTIFICADOR:id OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA // a := 12, a := b() + 3 - (4/d)..., f(...)
                    {:
                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    :};
asignar_valores_2 ::= IDENTIFICADOR:id ___operadores_aritmeticos expr_aritmeticas // a += 12
                    {:
                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    :}
                    | IDENTIFICADOR:id __operadores_aritmeticos // a++, a--
                    {:
                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    :}
                    | __operadores_aritmeticos IDENTIFICADOR:id // ++a, --a
                    {:
                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    :}
                    | IDENTIFICADOR:id1 OPERADOR_ASIGNACION_1 IDENTIFICADOR:id2 __operadores_aritmeticos // a := b++
                    {:
                        tablaSimbolos.agregarVariableUsada(id1.toString(), id1left, id1right);
                        tablaSimbolos.agregarVariableUsada(id2.toString(), id2left, id2right);
                    :}
                    | IDENTIFICADOR:id1 OPERADOR_ASIGNACION_1 __operadores_aritmeticos IDENTIFICADOR:id2 // a := ++b
                    {:
                        tablaSimbolos.agregarVariableUsada(id1.toString(), id1left, id1right);
                        tablaSimbolos.agregarVariableUsada(id2.toString(), id2left, id2right);
                    :};

llamar_func_o_proc ::= IDENTIFICADOR:id OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR
                    {:
                        boolean valida = tablaSimbolos.validarLlamadaFuncion(id.toString());
                        if(!valida){
                            ErrorSemantico("funcion", id.toString(), idleft, idright);
                        }
                    :};

parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func
                        | expr_aritmeticas
                        | epsilon;

_parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func | tokens;

expr_read_write ::= expr_read
                  | expr_write;

expr_read ::= READ OPERADOR_PARENTESIS_ABRIR _expr_read OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA
                | READ error
                    {:
                        report_error("Función READ", tokenError);
                        RESULT = new Symbol(-1);
                    :}
                    OPERADOR_PUNTO_Y_COMA;
_expr_read ::= IDENTIFICADOR | epsilon; //_tokens | epsilon;

expr_write ::= WRITE OPERADOR_PARENTESIS_ABRIR _tokens _expr_write OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA
                | WRITE error
                    {:
                        report_error("Función WRITE", tokenError);
                        RESULT = new Symbol(-1);
                    :}
                    OPERADOR_PUNTO_Y_COMA;
_expr_write ::= OPERADOR_COMA _tokens _expr_write | epsilon;

// ------------------------------ Estructuras de Control ---------------------------------------------------------------

estruc_de_control ::= sentencia_if
                    | sentencia_while
                    | sentencia_for;

sentencia_if ::= IF expr_booleanas THEN
                 _cuerpo _sentencia_if
                 END
                 | IF error
                     {:
                         report_error("Sentencia IF", tokenError);
                         RESULT = new Symbol(-1);
                     :}
                     END;

_sentencia_if ::= sentencia_else | epsilon;

sentencia_else ::= ELSE _cuerpo;

sentencia_while ::= WHILE expr_booleanas DO
                    BEGIN
                    _cuerpo
                    END
                    | WHILE error
                     {:
                         report_error("Sentencia WHILE", tokenError);
                         RESULT = new Symbol(-1);
                     :}
                     END;

sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION_1 tokens TO tokens DO
                  BEGIN
                  _cuerpo
                  END
                  | FOR error
                     {:
                         report_error("Sentencia FOR", tokenError);
                         RESULT = new Symbol(-1);
                     :}
                     END;

// ------------------------------ Expresiones --------------------------------------------------------------------------

expr_aritmeticas ::= tokens:_tk /*{: miToken = _tk.value.toString(); RESULT = new Symbol(-1, _tk.value); :}*/ _expr_aritmeticas /*{: RESULT = new Symbol(-1, miToken); :}*/
                    | llamar_func_o_proc _expr_aritmeticas
                    | OPERADOR_PARENTESIS_ABRIR expr_aritmeticas:ea OPERADOR_PARENTESIS_CERRAR /*{: RESULT = new Symbol(-1, ea.value); :}*/ _expr_aritmeticas;

_expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas:ea /*{: RESULT = new Symbol(-1, ea.value); :}*/
                    | epsilon;

expr_booleanas ::= tokens_boolean _expr_booleanas
            | tokens operadores_booleanos_1 tokens _expr_booleanas
            | OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas;

_expr_booleanas ::= AND expr_booleanas | OR expr_booleanas | epsilon;

// ------------------------------ Símbolos -----------------------------------------------------------------------------

operadores_aritmeticos ::= _operadores_aritmeticos | __operadores_aritmeticos | ___operadores_aritmeticos;
_operadores_aritmeticos ::= OPERADOR_ADICION:oa        {: /*pilaSemantica.push(oa.toString());*/ RESULT = new Symbol(-1, (Object) sym.OPERADOR_ADICION); miDTO.setOperador(sym.OPERADOR_ADICION); :}
                          | OPERADOR_SUSTRACCION:os    {: /*pilaSemantica.push(os.toString());*/ RESULT = new Symbol(-1, (Object) sym.OPERADOR_SUSTRACCION); miDTO.setOperador(sym.OPERADOR_SUSTRACCION); :}
                          | OPERADOR_MULTIPLICACION:om {: /*pilaSemantica.push(om.toString());*/ RESULT = new Symbol(-1, (Object) sym.OPERADOR_MULTIPLICACION); miDTO.setOperador(sym.OPERADOR_MULTIPLICACION); :}
                          | OPERADOR_DIVISION:od       {: /*pilaSemantica.push(od.toString());*/ RESULT = new Symbol(-1, (Object) sym.OPERADOR_DIVISION); miDTO.setOperador(sym.OPERADOR_DIVISION); :}
                          | MOD:mod                    {: /*pilaSemantica.push(mod.toString());*/ RESULT = new Symbol(-1, (Object) sym.MOD); miDTO.setOperador(sym.MOD); :}
                          | DIV:div                    {: /*pilaSemantica.push(div.toString());*/ RESULT = new Symbol(-1, (Object) sym.DIV); miDTO.setOperador(sym.DIV); :}
                          ;
__operadores_aritmeticos ::= OPERADOR_INCREMENTO:oi {: RESULT = new Symbol(-1, oi.toString()); :}
                          | OPERADOR_DISMINUCION:od {: RESULT = new Symbol(-1, od.toString()); :}
                          ; // a++. a--

___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION | OPERADOR_ASIGNACION_SUSTRACCION
                             | OPERADOR_ASIGNACION_MULTIPLICACION | OPERADOR_ASIGNACION_DIVISION;

operadores_booleanos ::= OPERADOR_MAYOR_QUE:omaq         {: RESULT = new Symbol(-1, omaq.toString()); :}
                       | OPERADOR_MAYOR_IGUAL_QUE:omaiq  {: RESULT = new Symbol(-1, omaiq.toString()); :}
                       | OPERADOR_MENOR_QUE:omeq         {: RESULT = new Symbol(-1, omeq.toString()); :}
                       | OPERADOR_MENOR_IGUAL_QUE:omeiq  {: RESULT = new Symbol(-1, omeiq.toString()); :}
                       | OPERADOR_DIFERENTE_DE:odd       {: RESULT = new Symbol(-1, odd.toString()); :}
                       ;

operadores_booleanos_1 ::= operadores_booleanos | OPERADOR_ASIGNACION_2;

tokens ::= _tokens:tk {: RESULT = new Symbol(-1, tk.value); :}
        | tokens_boolean;
_tokens ::= IDENTIFICADOR:id
            {:
                /*pilaSemantica.push(id.toString());*/ RESULT = new Symbol(-1, id.toString());

                tablaSimbolos.agregarParametroLlamada(id.toString());
                tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
            :}
        | LITERAL_NUM_ENTERO:lne
          {:
                /*pilaSemantica.push(lne.toString());*/ RESULT = new Symbol(-1, lne.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.INT);
          :}
        | LITERAL_NUM_FLOTANTE:lnf
          {:
                /*pilaSemantica.push(lnf.toString());*/ RESULT = new Symbol(-1, lnf.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.REAL);
          :}
        | LITERAL_STRING:ls
          {:
                /*pilaSemantica.push(ls.toString());*/ RESULT = new Symbol(-1, ls.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.STRING);
          :}
        ;

tokens_boolean ::= TRUE:True
           {:
                RESULT = new Symbol(-1, True.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
           :}
        | FALSE:False
            {:
                RESULT = new Symbol(-1, False.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
            :}
        | NOT IDENTIFICADOR:id
            {:
                RESULT = new Symbol(-1, id.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
                tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
            :}
        | NOT TRUE:nt
            {:
                RESULT = new Symbol(-1, nt.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
            :}
        | NOT FALSE:nf
            {:
                RESULT = new Symbol(-1, nf.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
            :}
            ;

tipos ::= INT:i
        {:
            RESULT = new Symbol(-1, i.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.INT);
        :}
        | SHORTINT:si
        {:
            RESULT = new Symbol(-1, si.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.SHORTINT);
        :}
        | LONGINT:li
        {:
            RESULT = new Symbol(-1, li.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.LONGINT);
        :}
        | REAL:r
        {:
            RESULT = new Symbol(-1, r.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.REAL);
        :}
        | STRING:s
        {:
            RESULT = new Symbol(-1, s.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.STRING);
        :}
        | CHAR:c
        {:
            RESULT = new Symbol(-1, c.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.CHAR);
        :}
        | BOOLEAN:b
        {:
            RESULT = new Symbol(-1, b.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.BOOLEAN);
        :} ;

epsilon ::= {: RESULT = new Symbol(-1); :};
